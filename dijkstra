#include <stdio.h>
#define INFINITY 9999  // Represents a large number as infinity
#define MAX 10         // Maximum number of vertices

// Dijkstra's algorithm to find shortest paths from a starting node
void dijkstra(int G[MAX][MAX], int n, int startnode) {
    int cost[MAX][MAX], distance[MAX], pred[MAX];
    int visited[MAX] = {0};  // Keeps track of visited nodes
    int count, mindistance, nextnode;

    // Create the cost matrix: if no edge, set to INFINITY
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cost[i][j] = (G[i][j] == 0) ? INFINITY : G[i][j];

    // Initialize distance and predecessor arrays
    for (int i = 0; i < n; i++) {
        distance[i] = cost[startnode][i];
        pred[i] = startnode;
    }

    distance[startnode] = 0;     // Distance to self is 0
    visited[startnode] = 1;      // Mark startnode as visited
    count = 1;

    // Loop until all nodes are visited
    while (count < n - 1) {
        mindistance = INFINITY;

        // Find the unvisited node with the smallest distance
        for (int i = 0; i < n; i++)
            if (distance[i] < mindistance && !visited[i]) {
                mindistance = distance[i];
                nextnode = i;
            }

        visited[nextnode] = 1;  // Mark the selected node as visited

        // Update distances of adjacent unvisited nodes
        for (int i = 0; i < n; i++)
            if (!visited[i] && mindistance + cost[nextnode][i] < distance[i]) {
                distance[i] = mindistance + cost[nextnode][i];
                pred[i] = nextnode;
            }

        count++;
    }

    // Print the result
    for (int i = 0; i < n; i++) {
        if (i != startnode) {
            printf("\nDistance of node %d = %d", i, distance[i]);
            printf("\nPath = %d", i);

            int j = i;
            // Print path by tracing predecessors
            while (j != startnode) {
                j = pred[j];
                printf(" <- %d", j);
            }
            printf("\n");
        }
    }
}

int main() {
    int G[MAX][MAX], n, u;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &G[i][j]);

    printf("Enter the starting node: ");
    scanf("%d", &u);

    dijkstra(G, n, u);

    return 0;
}
