#include <stdio.h>

// Utility function to return maximum of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Function to solve the 0-1 Knapsack problem using Dynamic Programming
int knapSack(int W, int wt[], int val[], int n) {
    int i, w;
    int K[n + 1][W + 1];

    // Build the table K[][] in bottom-up manner
    for (i = 0; i <= n; i++) {
        for (w = 0; w <= W; w++) {
            if (i == 0 || w == 0)
                K[i][w] = 0;  // Base case: no items or weight is 0
            else if (wt[i - 1] <= w)
                // Item can be included: take max of including or excluding it
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]],
                              K[i - 1][w]);
            else
                // Item cannot be included due to weight limit
                K[i][w] = K[i - 1][w];
        }
    }

    // Final result: maximum value for full capacity and all items
    return K[n][W];
}

int main() {
    int val[] = { 60, 100, 120 };     // Values of items
    int wt[] = { 10, 20, 30 };        // Weights of items
    int W = 50;                       // Maximum capacity of knapsack
    int n = sizeof(val) / sizeof(val[0]);  // Number of items

    printf("Maximum value in knapsack = %d\n", knapSack(W, wt, val, n));

    return 0;
}
