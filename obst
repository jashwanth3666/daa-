#include <stdio.h>
#include <limits.h>

// Utility function to calculate the sum of frequencies from index i to j
int sum(int freq[], int i, int j) {
    int s = 0;
    for (int k = i; k <= j; k++)
        s += freq[k];
    return s;
}

// Recursive function to calculate the minimum cost of OBST
int optCost(int freq[], int i, int j) {
    // Base case: no elements
    if (j < i)
        return 0;

    // Base case: one element, so cost is frequency itself
    if (i == j)
        return freq[i];

    // Sum of frequencies from i to j
    int fsum = sum(freq, i, j);

    int min = INT_MAX;

    // Try making each key in range [i..j] the root and calculate cost
    for (int r = i; r <= j; r++) {
        // Cost when r is root:
        // cost of left subtree + cost of right subtree
        int cost = optCost(freq, i, r - 1) + optCost(freq, r + 1, j);

        // Choose minimum among all possible roots
        if (cost < min)
            min = cost;
    }

    // Return minimum cost + sum of frequencies (as root increases depth by 1)
    return min + fsum;
}

// Main function to compute the optimal search tree cost
int optimalSearchTree(int keys[], int freq[], int n) {
    return optCost(freq, 0, n - 1);
}

// Driver Code
int main() {
    int keys[] = {10, 12, 20};
    int freq[] = {34, 8, 50}; // Frequency of searches for each key
    int n = sizeof(keys) / sizeof(keys[0]);

    int cost = optimalSearchTree(keys, freq, n);
    printf("Cost of Optimal BST is %d\n", cost);

    return 0;
}
