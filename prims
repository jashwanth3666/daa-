#include <stdio.h>
#include <stdlib.h>

#define INFINITY 9999
#define MAX 20

int G[MAX][MAX], spanning[MAX][MAX], n;

int prims();

int main() {
    int i, j, total_cost;

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("\nEnter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &G[i][j]);

    total_cost = prims();

    printf("\nSpanning Tree Matrix:\n");
    for (i = 0; i < n; i++) {
        printf("\n");
        for (j = 0; j < n; j++)
            printf("%d\t", spanning[i][j]);
    }

    printf("\n\nTotal cost of spanning tree = %d\n", total_cost);

    return 0;
}

// Prim's algorithm implementation
int prims() {
    int cost[MAX][MAX];
    int u, v, min_distance, distance[MAX], from[MAX];
    int visited[MAX], no_of_edges, i, j, min_cost;

    // Create cost matrix and initialize spanning matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            if (G[i][j] == 0)
                cost[i][j] = INFINITY;
            else
                cost[i][j] = G[i][j];
            spanning[i][j] = 0;
        }

    // Initialize distance[], from[], and visited[]
    distance[0] = 0;
    visited[0] = 1;

    for (i = 1; i < n; i++) {
        distance[i] = cost[0][i];
        from[i] = 0;
        visited[i] = 0;
    }

    min_cost = 0;        // Total cost of spanning tree
    no_of_edges = n - 1; // Number of edges to be added

    while (no_of_edges > 0) {
        min_distance = INFINITY;

        // Find the vertex at minimum distance from the tree
        for (i = 1; i < n; i++) {
            if (!visited[i] && distance[i] < min_distance) {
                v = i;
                min_distance = distance[i];
            }
        }

        u = from[v];

        // Insert the edge into the spanning tree
        spanning[u][v] = distance[v];
        spanning[v][u] = distance[v];

        visited[v] = 1;
        no_of_edges--;
        min_cost += cost[u][v];

        // Update the distance[] array
        for (i = 1; i < n; i++) {
            if (!visited[i] && cost[i][v] < distance[i]) {
                distance[i] = cost[i][v];
                from[i] = v;
            }
        }
    }

    return min_cost;
}
